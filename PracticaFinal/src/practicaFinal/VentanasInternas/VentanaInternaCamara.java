/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal.VentanasInternas;

import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.Buffer;
import javax.media.CannotRealizeException;
import javax.media.CaptureDeviceInfo;
import javax.media.CaptureDeviceManager;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.NoPlayerException;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.format.YUVFormat;
import javax.media.util.BufferToImage;
import practicaFinal.VentanaPrincipal;

/**
 *
 * @author oskyar
 */
public class VentanaInternaCamara extends javax.swing.JInternalFrame {

    /**
     * Creates new form VentanaInterna
     */
    Player player;

    private VentanaInternaCamara() {
        initComponents();

        try {
            CaptureDeviceInfo deviceInfo;
            String dName="vfw:Microsoft WDM Image Capture (Win32):0";
            deviceInfo = CaptureDeviceManager.getDevice(dName);
//            List<CaptureDeviceInfo> deviceList = CaptureDeviceManager.getDeviceList(new YUVFormat());
//            if (deviceList.size() > 0) {
//                deviceInfo = deviceList.get(0);
                MediaLocator ml = deviceInfo.getLocator();
                player = Manager.createRealizedPlayer(ml);
                Component areaVisual = player.getVisualComponent();
                if (areaVisual != null) {
                    add(areaVisual);
                }
                Component panelControl = player.getControlPanelComponent();
                if (panelControl != null) {
                    add(panelControl);
                }
                player.start();
//            } else {
//                System.err.println("No se ha encontrado ning√∫n dispositivo de captura");
//            }

            this.pack();
        } catch (IOException ex) {
            Logger.getLogger(VentanaInternaCamara.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoPlayerException ex) {
            Logger.getLogger(VentanaInternaCamara.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CannotRealizeException ex) {
            Logger.getLogger(VentanaInternaCamara.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void showWebcam(){
        VentanaInternaCamara vi = VentanaInternaCamara.getInstance();
        if (vi != null) {
            VentanaPrincipal.getEscritorio().add(vi);
            vi.setVisible(true);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recorderGroup = new javax.swing.ButtonGroup();

        setClosable(true);
        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(640, 480));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static VentanaInternaCamara getInstance() {
        VentanaInternaCamara vi = new VentanaInternaCamara();
        if (vi.player != null) {
            return vi;
        } else {
            return null;
        }
    }

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if (player != null) {
            player.close();
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        VentanaPrincipal.getInstance().showToolsBarsOrNot(VentanaPrincipal.SHOW_TOOLBAR_CAMERA);
    }//GEN-LAST:event_formInternalFrameActivated

    public void close() {
        try {
            player.close();
        } catch (Exception e) {
            e.getMessage();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup recorderGroup;
    // End of variables declaration//GEN-END:variables

    public BufferedImage getFrame() {
        FrameGrabbingControl fgc;
        String claseCtr = "javax.media.control.FrameGrabbingControl ";
        fgc = (FrameGrabbingControl) player.getControl(claseCtr);
        Buffer bufferFrame = fgc.grabFrame();
        BufferToImage bti;
        bti = new BufferToImage((VideoFormat) bufferFrame.getFormat());
        Image img = bti.createImage(bufferFrame);
        return (BufferedImage) img;

    }

}
