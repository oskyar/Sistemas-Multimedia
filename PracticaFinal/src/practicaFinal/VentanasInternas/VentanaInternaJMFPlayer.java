/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal.VentanasInternas;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.Buffer;
import javax.media.CannotRealizeException;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.NoPlayerException;
import javax.media.Player;
import javax.media.Time;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
import practicaFinal.VentanaPrincipal;
import practicaFinal.filefilter.UtilFileFilter;

/**
 *
 * @author oskyar
 */
public class VentanaInternaJMFPlayer extends javax.swing.JInternalFrame {

    /**
     * Creates new form VentanaInterna
     */
    private Player player;

    private VentanaInternaJMFPlayer(File f) {
        initComponents();
        this.setTitle(f.getName());

        try {
            MediaLocator ml = new MediaLocator("file:" + f.getAbsolutePath());
            player = Manager.createRealizedPlayer(ml);
            Component areaVisual = player.getVisualComponent();
            if (areaVisual != null) {
                play.setVisible(false);
                stop.setVisible(false);
                add(areaVisual, BorderLayout.CENTER);
                //Meto aqui el panel de control para que de esta forma solo 
                //se muestre con videos y para sonidos mi panel personalizado.
            }
            Component panelControl = player.getControlPanelComponent();
            if (panelControl != null) {
                add(panelControl, BorderLayout.SOUTH);
            }
            pack();

        } catch (IOException ex) {
            System.err.println("ERROR: " + ex.getMessage());
            player = null;
        } catch (NoPlayerException ex) {
            Logger.getLogger(VentanaInternaJMFPlayer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CannotRealizeException ex) {
            Logger.getLogger(VentanaInternaJMFPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void showJMFPlayer(File f, String name) {
        VentanaInternaJMFPlayer vi = VentanaInternaJMFPlayer.getInstance(f);
        VentanaPrincipal.getEscritorio().add(vi);
        vi.setVisible(true);
        vi.setTitle(f.getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonesReproductor = new javax.swing.JPanel();
        play = new javax.swing.JToggleButton();
        stop = new javax.swing.JToggleButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(250, 120));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        botonesReproductor.setLayout(new java.awt.GridLayout(1, 0));

        play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/PlayPressed_48x48.png"))); // NOI18N
        play.setMaximumSize(new java.awt.Dimension(125, 100));
        play.setPreferredSize(new java.awt.Dimension(125, 60));
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });
        botonesReproductor.add(play);

        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/StopNormalRed_48x48.png"))); // NOI18N
        stop.setEnabled(false);
        stop.setMaximumSize(new java.awt.Dimension(125, 60));
        stop.setPreferredSize(new java.awt.Dimension(125, 60));
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });
        botonesReproductor.add(stop);

        getContentPane().add(botonesReproductor, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        if (player != null) {
            stop.setEnabled(false);
            play.setEnabled(true);
            play.setSelected(false);
            stop.setSelected(true);
            player.stop();
            player.setMediaTime(new Time(0));
        }
    }//GEN-LAST:event_stopActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        if (player != null) {
            stop.setEnabled(true);
            play.setEnabled(false);
            play.setSelected(true);
            stop.setSelected(false);
            play();
        }
    }//GEN-LAST:event_playActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if (player != null) {
            player.close();
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        VentanaPrincipal.getInstance().showToolsBarsOrNot(VentanaPrincipal.SHOW_TOOLBAR_JMF);
    }//GEN-LAST:event_formInternalFrameActivated

    public static VentanaInternaJMFPlayer getInstance(File f) {
        VentanaInternaJMFPlayer vi = new VentanaInternaJMFPlayer(f);
        if (vi.player != null) {
            return vi;
        } else {
            return null;
        }
    }

    public void play() {
        try {
            player.start();
        } catch (Exception e) {
            e.getMessage();
        }
    }

    public void close() {
        try {
            player.close();
        } catch (Exception e) {
            e.getMessage();
        }
    }

    public Player getPlayer() {
        return this.player;
    }

    public BufferedImage getFrame() {
        FrameGrabbingControl fgc;
        String claseCtr = "javax.media.control.FrameGrabbingControl";
        fgc = (FrameGrabbingControl) player.getControl(claseCtr);
        Buffer bufferFrame = fgc.grabFrame();
        BufferToImage bti;
        bti = new BufferToImage((VideoFormat) bufferFrame.getFormat());
        Image img = bti.createImage(bufferFrame);
        return (BufferedImage) img;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel botonesReproductor;
    private javax.swing.JToggleButton play;
    private javax.swing.JToggleButton stop;
    // End of variables declaration//GEN-END:variables

}
